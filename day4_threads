Multi-threading and Concurrency
program vs process vs threads
static code <-> execution of program <-> a execution rutine
- one process is going to do 1 task and 1 task only
- in between process, it's gerunteed that memory was isolated (cannot be share)
* Java is portable language, compile once(saved the compiled code on memory) and run on any machine
  .Class files(byte files)-> Class Loader -> Memory Area (RAM)
* concurrent programming vs in-parallel program
  concurrent: even when we just have 1 thread, we can switch between different program
Ways to create threads:
1. Thread Class
2. Runnable Interface
3. Callable Interface
4. Thread Pool (technically web-based development, this is only thing you should use)

run() vs start()
- srart() creates a new thread
- Lifecycle (status) of threads: NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITEING, TERMINATED

Thread Pool

       Executor -> ExecutorService -> ThreadPoolExecutor
                     ^            corePoolSize
                     |            maximumPoolSize
                     |            keepAliveTime                                           
                     |            unit
                 Executors        workQueue
                                  threadFactory
                                  handler

public class Day5 {
    public static void main(String[] args){
        new MyThread().start();
//        new MyThread().run();
        System.out.println("main thread");

        ExecutorService executorService = Executors.newCachedThreadPool();
    }
}

class MyThread extends Thread {
    public void run() {
        System.out.println("my thread");
    }
}

class MyRunnable implements Runnable {
    public void run() {
        System.out.println("my thread");
    }
}

history of jdk
jdk7
jdk8 -> 2018, widly used but buggy, more stable ver compare to previous-> Spring framework booming
 jdk11 -> released "flight recorder", free version
jdk17 -> Spring6/Springboot 3.0
 * recent 3-5 years a lot directly migrate from 8->17 and/or 8->11->17
 jdk19 -> virtual thread -> Loom project
jdk21 -> virtual thread (normal object)
* we DON'T use latest version
